{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nfunction FetchDataComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_mat_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-card\", 3);\n    i0.ɵɵlistener(\"click\", function FetchDataComponent_mat_card_5_Template_mat_card_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const forecast_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.open(forecast_r2.url));\n    });\n    i0.ɵɵelementStart(1, \"mat-card-content\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-card-subtitle\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const forecast_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(forecast_r2.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"by \", forecast_r2.by, \"\");\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.forecasts = [];\n    this.get(\"\");\n  }\n  get(searchTerm) {\n    this.http.get(this.baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => console.error(error));\n  }\n  search(event) {\n    this.get(event.target.value);\n  }\n  open(url) {\n    window.open(url, \"_blank\");\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 6,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(5, FetchDataComponent_mat_card_5_Template, 6, 2, \"mat-card\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.forecasts == null ? null : ctx.forecasts.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.forecasts);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.MatCard, i3.MatCardContent, i3.MatCardSubtitle, i3.MatCardTitle],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;IAIAA,yBAA8B;IAAIA,0BAAU;IAAAA,iBAAK;;;;;;IACjDA,mCAA0E;IAA7BA;MAAA;MAAA;MAAA;MAAA,OAASA,2CAAkB;IAAA,EAAC;IACvEA,wCAAkB;IACAA,YAAoB;IAAAA,iBAAiB;IACrDA,yCAAmB;IAAAA,YAAoB;IAAAA,iBAAoB;;;;IAD3CA,eAAoB;IAApBA,uCAAoB;IACjBA,eAAoB;IAApBA,gDAAoB;;;ACD3C,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAFlE,cAAS,GAAsB,EAAE;IAGtC,IAAI,CAACC,GAAG,CAAC,EAAE,CAAC;EACd;EAEAA,GAAG,CAACC,UAAkB;IACpB,IAAI,CAACH,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACD,OAAO,GAAG,iBAAiB,CAAC,CAACG,SAAS,CAACC,MAAM,IAAG;MACpF,IAAI,CAACC,SAAS,GAAGD,MAAM;IACzB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEAE,MAAM,CAACC,KAAoB;IACzB,IAAI,CAACR,GAAG,CAAEQ,KAAK,CAACC,MAA8B,CAACC,KAAK,CAAC;EACvD;EAEAC,IAAI,CAACC,GAAW;IACdC,MAAM,CAACF,IAAI,CAACC,GAAG,EAAE,QAAQ,CAAC;EAC5B;;AAnBWhB,kBAAkB;mBAAlBA,kBAAkB,4DAGiB,UAAU;AAAA;AAH7CA,kBAAkB;QAAlBA,kBAAkB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP/BvB,6BAAoB;MAAAA,gCAAgB;MAAAA,iBAAK;MAEzCA,yBAAG;MAAAA,0EAA0D;MAAAA,iBAAI;MAEjEA,+DAAqD;MACrDA,6EAKW;;;MANPA,eAAwB;MAAxBA,6EAAwB;MACGA,eAAY;MAAZA,uCAAY","names":["i0","FetchDataComponent","constructor","http","baseUrl","get","searchTerm","subscribe","result","forecasts","error","console","search","event","target","value","open","url","window","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\jfontana\\source\\HackerNewsApp\\HackerNews\\HackerNews\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\Users\\jfontana\\source\\HackerNewsApp\\HackerNews\\HackerNews\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts?.length\"><em>Loading...</em></p>\r\n<mat-card *ngFor=\"let forecast of forecasts\" (click)=\"open(forecast.url)\">\r\n  <mat-card-content>\r\n    <mat-card-title>{{ forecast.title }}</mat-card-title>\r\n    <mat-card-subtitle>by {{ forecast.by }}</mat-card-subtitle>\r\n  </mat-card-content>\r\n</mat-card>\r\n\r\n<!--<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.title }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>-->\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: HackerNewsStory[] = [];\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    this.get(\"\");\r\n  }\r\n\r\n  get(searchTerm: string) {\r\n    this.http.get<HackerNewsStory[]>(this.baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  search(event: KeyboardEvent) {\r\n    this.get((event.target as HTMLTextAreaElement).value);\r\n  }\r\n\r\n  open(url: string) {\r\n    window.open(url, \"_blank\");\r\n  }\r\n}\r\n\r\ninterface HackerNewsStory {\r\n  title: string;\r\n  by: string;\r\n  url: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}